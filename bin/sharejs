#!/usr/bin/env node


require('coffee-script');
var util = require('util');
var fs = require('fs');
var connect = require('connect');
var sharejs = require('../src');

var argv = require('optimist').
    usage("Usage: $0 -f options.js").
	demand('f').
    alias('f','options').
	argv;


var server;
var postmark;
var airbrake;

options = require(argv.options);

// Set the environment for Node, Airbrake/others use this.
if (options.environment) {
    process.env.NODE_ENV = options.environment;
}

if(options.postmark && options.postmark.key){
    postmark = require("postmark")(options.postmark.key);
}

if (options.airbrake && options.airbrake.projectKey) {
    airbrake =  require("airbrake").createClient(options.airbrake.projectKey);
    airbrake.handleExceptions();
}

if(options.pem) {
    server = connect({
         key : fs.readFileSync(options.pem),
         cert : fs.readFileSync(options.pem)
     },connect.logger(),connect.query());
} else {
    server = connect(connect.logger(),connect.query());
}

util.puts("ShareJS server v" + sharejs.version);
util.puts("Options: " + util.inspect(options, true, null));

var port = options.port || 8000;

// Attach the sharejs REST and Socket.io interfaces to the server
sharejs.server.attach(server, options);

server.listen(port);

util.puts("Server running on port: " + port);

process.title = 'sharejs'
process.on('uncaughtException', function (err) {
  util.puts('An error has occurred...');
  util.puts('Version ' + sharejs.version + ': ' + err.stack);
  if(postmark){
    postmark.send({
      "From": options.postmark.from_address,
      "To": options.postmark.to_address,
      "Subject": options.postmark.subject_prefix + '[sharejs]: Uncaught Exception Event',
      "TextBody": 'ShareJS ' + sharejs.version + ' has exited after receiving an uncaughtException event.' + err.stack
    },function(err,res){
        process.exit(1);
    });
  }else{
    process.exit(1);
  }
});
